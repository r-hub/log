<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The r-hub log</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://log.github.io/"/>
  <updated>2016-11-22T13:08:10.000Z</updated>
  <id>http://log.github.io/</id>
  
  <author>
    <name>Gábor Csárdi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Build artifacts</title>
    <link href="http://log.github.io/2016/11/22/2016-11-22-artifacts/"/>
    <id>http://log.github.io/2016/11/22/2016-11-22-artifacts/</id>
    <published>2016-11-22T00:00:00.000Z</published>
    <updated>2016-11-22T13:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you looked at the R-hub notifications in the past two weeks, you might have noticed that at the bottom of the email there is a new link called “artifacts”. This link points to a temporary web space, that contains the build artifacts of your R package:</p>
<ul>
<li>The <code>00check.log</code> file of the check output.</li>
<li>The <code>00install.out</code> file, the output of the installation of the package. This is often helpful if the installation fails, as the normal check output omits the details in this case.</li>
<li>Output of the tests.</li>
<li>Source R package. This should be the same as the uploaded one.</li>
<li>Binary R package for your platform.</li>
<li>Binary packages for all dependent packages that were built from source. These include packages specified via the <code>Remotes</code> mechanism. See more about that <a href="https://cran.rstudio.com/web/packages/devtools/vignettes/dependencies.html" target="_blank" rel="external">here</a>.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you looked at the R-hub notifications in the past two weeks, you might have noticed that at the bottom of the email there is a new lin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fixing various bugs</title>
    <link href="http://log.github.io/2016/10/25/2016-10-25-fixing-things/"/>
    <id>http://log.github.io/2016/10/25/2016-10-25-fixing-things/</id>
    <published>2016-10-24T23:00:00.000Z</published>
    <updated>2016-10-25T09:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rhub-package-rewrite"><a href="#rhub-package-rewrite" class="headerlink" title="rhub package rewrite"></a><code>rhub</code> package rewrite</h2><p>I reorganized the <code>rhub</code> package, and created R6 classes to hold information about the checks. Much cleaner now. Functions <code>check()</code>, <code>check_for_cran()</code> <code>list_my_checks()</code>, <code>list_package_check()</code>,e etc. all return <code>rhub_check</code> objects.</p>
<p>There is also a new function <code>last_check()</code> that returns the last submitted check of the current R session.</p>
<h2 id="Bug-fixes"><a href="#Bug-fixes" class="headerlink" title="Bug fixes"></a>Bug fixes</h2><ul>
<li><p>The web submission checks the submitted filename. If it does not look like a proper R source package, built via <code>R CMD build</code>, then we reject it immediately.</p>
</li>
<li><p>On Linux platforms, we are now installing <code>pandoc</code> from the binaries built by RStudio. Unfortunately this still fails sometimes: <a href="https://github.com/r-hub/rhub-linux-builders/issues/10" target="_blank" rel="external">https://github.com/r-hub/rhub-linux-builders/issues/10</a> <a href="https://github.com/r-hub/rhub-linux-builders/issues/15" target="_blank" rel="external">https://github.com/r-hub/rhub-linux-builders/issues/15</a> We will have to build our own pandoc binaries or packages…</p>
</li>
<li><p><code>qpdf</code> is needed for checking PDF documentation. It is now installed on the Linux builders. Windows coming soon.</p>
</li>
<li><p>The Jenkins job reaper does not fail on unusual jobs, e.g. ones that were aborted or that never ran for some reason.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rhub-package-rewrite&quot;&gt;&lt;a href=&quot;#rhub-package-rewrite&quot; class=&quot;headerlink&quot; title=&quot;rhub package rewrite&quot;&gt;&lt;/a&gt;&lt;code&gt;rhub&lt;/code&gt; package 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Small usability fixes</title>
    <link href="http://log.github.io/2016/10/19/2016-10-19-small-usability-fixes/"/>
    <id>http://log.github.io/2016/10/19/2016-10-19-small-usability-fixes/</id>
    <published>2016-10-18T23:00:00.000Z</published>
    <updated>2016-10-19T08:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Typically small fixes, that improve user experience.</p>
<ul>
<li><p>Set <code>_R_CHECK_FORCE_SUGGESTS_</code> to <code>false</code> on Windows, by default.</p>
</li>
<li><p>Allow overriding <code>R_CHECK_FORCE_SUGGESTS_</code> on Linux. (Previously it was set after the user supplied environment variables.)</p>
</li>
<li><p>Use our CRAN mirror on Windows as well. For this I had to make it public, because the windows builders are classic Azure machines, so they are on a different internal network. I also installed HTTPS on it, via letsencrypt.</p>
</li>
<li><p>Fixed the Jenkins job reaper, the rhub-cron process that removes old jobs from Jenkins.</p>
</li>
<li><p>Updated the R-hub API, so that a job can be submitted for multiple platforms. This is needed for the <code>check_for_cran()</code> function in <code>rhub</code>.</p>
</li>
<li><p>Added the <code>check_for_cran()</code> function to the <code>rhub</code> package. It runs the checks on 3-4 platforms, depending on whether the package has compiled code.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Typically small fixes, that improve user experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;_R_CHECK_FORCE_SUGGESTS_&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on W
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>News, big and small</title>
    <link href="http://log.github.io/2016/10/18/2016-10-18-new-big-and-small/"/>
    <id>http://log.github.io/2016/10/18/2016-10-18-new-big-and-small/</id>
    <published>2016-10-17T23:00:00.000Z</published>
    <updated>2016-10-20T08:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Biggish-changes"><a href="#Biggish-changes" class="headerlink" title="Biggish changes"></a>Biggish changes</h2><h3 id="Nice-emails"><a href="#Nice-emails" class="headerlink" title="Nice emails."></a>Nice emails.</h3><p>The email sending happens on the front-end app now, Jenkins only sends a signal that the build is done. This gives us much more flexibility in formatting the emails.</p>
<p><img src="/images/nice-email-1.png" alt=""><br><img src="/images/nice-email-2.png" alt=""></p>
<h3 id="Log-database"><a href="#Log-database" class="headerlink" title="Log database"></a>Log database</h3><p>The check logs are stored in a log database. This allows a better API, e.g. querying checks for an email address.</p>
<h3 id="New-API-endpoints"><a href="#New-API-endpoints" class="headerlink" title="New API endpoints"></a>New API endpoints</h3><ul>
<li>Better <code>status</code> API, using the log database, it handles multiple checks at once.</li>
<li><code>livelog</code> to supply the build log in a non-stream format.</li>
</ul>
<h3 id="rhub-package-improvements"><a href="#rhub-package-improvements" class="headerlink" title="rhub package improvements"></a><code>rhub</code> package improvements</h3><ul>
<li><code>status</code> API, to query the status of a build. It also handles multiple checks.</li>
<li><code>list</code> API, to list checks for an email address and/or a package.</li>
<li>Cache id of last submission. So the status can be checked easily.</li>
<li>Platform chooser. This is used by default if no platform is specified and the R session is interactive.</li>
<li>Revamped the email validation API.</li>
</ul>
<h2 id="Smaller-changes-and-Bug-fixes"><a href="#Smaller-changes-and-Bug-fixes" class="headerlink" title="Smaller changes and Bug fixes"></a>Smaller changes and Bug fixes</h2><ul>
<li><p>Fixed the <code>f90</code> compiler on the Debian builders. We need to set the <code>FC</code> option when compiling R.</p>
</li>
<li><p>Created a repository with small test packages, and known check output: <a href="https://github.com/r-hub/test-packages" target="_blank" rel="external">https://github.com/r-hub/test-packages</a></p>
</li>
<li><p>We use our internal CRAN mirror, to avoid external traffic, and speed up the check. Both on Linux and Windows.</p>
</li>
<li><p>Avoid streaming the Jenkins log, this gives a nicer API for the R client. For example it avoids splitting into lines in R. This happends in JS now, and it is more reliable. It also reduces the traffic.</p>
</li>
<li><p>Handle <code>ABORTED</code> builds. These are typically timeouts because of no output.</p>
</li>
<li><p>Set _R_CRAN_FORCE<em>SUGGESTS</em> to false on all builders, but allow overriding it.</p>
</li>
<li><p>Fixed the Jenkins job reaper that runs every hour and removes jobs older than three days.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Biggish-changes&quot;&gt;&lt;a href=&quot;#Biggish-changes&quot; class=&quot;headerlink&quot; title=&quot;Biggish changes&quot;&gt;&lt;/a&gt;Biggish changes&lt;/h2&gt;&lt;h3 id=&quot;Nice-emails&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>This week&#39;s admin bits, ticking off the TODO list</title>
    <link href="http://log.github.io/2016/10/03/2016-09-27-ticking-off-todo-list/"/>
    <id>http://log.github.io/2016/10/03/2016-09-27-ticking-off-todo-list/</id>
    <published>2016-10-02T23:00:00.000Z</published>
    <updated>2016-10-03T14:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Build-time-limits"><a href="#Build-time-limits" class="headerlink" title="Build time limits"></a>Build time limits</h2><p>It is ten minutes without output currently. The time limit plugin does not allow me to set an additional hard limit as well…</p>
<h2 id="Passing-arguments-to-R-CMD-check"><a href="#Passing-arguments-to-R-CMD-check" class="headerlink" title="Passing arguments to R CMD check"></a>Passing arguments to <code>R CMD check</code></h2><p>Works now on Linux. Need to write some PowerShell to make it work on Windows: <a href="https://github.com/r-hub/wincheck/issues/6" target="_blank" rel="external">https://github.com/r-hub/wincheck/issues/6</a></p>
<h2 id="Docker-cleanup-on-the-image-builder"><a href="#Docker-cleanup-on-the-image-builder" class="headerlink" title="Docker cleanup on the image builder"></a>Docker cleanup on the image builder</h2><p>The docker image builder cleans up old images and containers now.<br>The builders should do the same, ideally.</p>
<h2 id="Installing-valgrind"><a href="#Installing-valgrind" class="headerlink" title="Installing valgrind"></a>Installing valgrind</h2><p>On all ~15 Linux images, to make sure it works.</p>
<h2 id="rhub-package-fixes"><a href="#rhub-package-fixes" class="headerlink" title="rhub package fixes:"></a><code>rhub</code> package fixes:</h2><ul>
<li><p>Allow the email tokens from the web app in the CLI app as well: <a href="https://github.com/gaborcsardi/rhub/issues/8" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/8</a> The other way does not work currently.</p>
</li>
<li><p>Checking tarballs works now: <a href="https://github.com/gaborcsardi/rhub/issues/14" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/14</a></p>
</li>
<li><p>SAN runs work fine now: <a href="https://github.com/r-hub/rhub-backend/issues/10" target="_blank" rel="external">https://github.com/r-hub/rhub-backend/issues/10</a> <a href="https://github.com/gaborcsardi/rhub/issues/9" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/9</a></p>
</li>
<li><p>I checked that the package works fine on Windows / OSX / Linux. We’ll have proper CI at some point…</p>
</li>
<li><p>Wrote a bunch of test cases. Found and fixed a couple of small bugs as well. <a href="https://github.com/gaborcsardi/rhub/issues/24" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/24</a></p>
</li>
<li><p>Wrote higher level wrapper functions, so one can just say <code>check_on_windows()</code> instead of selecting the exact platform. <a href="https://github.com/gaborcsardi/rhub/issues/20" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/20</a> <a href="https://github.com/gaborcsardi/rhub/issues/22" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/22</a></p>
</li>
<li><p>One can pass <code>R CMD check</code> arguments, e.g. <code>--valgrind</code> to the builder, and also environment variables. <a href="https://github.com/gaborcsardi/rhub/issues/4" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/4</a></p>
</li>
</ul>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul>
<li><p>There is a nice image now, called <code>win-builder-2016-10-03</code> that has everything installed, hopefully.</p>
</li>
<li><p>The image has <code>r-oldrel</code>, <code>r-release</code>, <code>r-patched</code> and <code>r-devel</code> installed, and the frontend and backend also has everything needed to support them.</p>
</li>
</ul>
<h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h2><ul>
<li>It turns out that the stable nginx version (0.10.x) does not handle http/2 properly, so I had to turn it off. More details: <a href="https://github.com/gaborcsardi/rhub/issues/19" target="_blank" rel="external">https://github.com/gaborcsardi/rhub/issues/19</a> <a href="https://github.com/curl/curl/issues/1040" target="_blank" rel="external">https://github.com/curl/curl/issues/1040</a> <a href="https://github.com/dokku/dokku/issues/2435" target="_blank" rel="external">https://github.com/dokku/dokku/issues/2435</a></li>
</ul>
<p>So currently I still use nginx 0.10.x with http/2 turned off.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Build-time-limits&quot;&gt;&lt;a href=&quot;#Build-time-limits&quot; class=&quot;headerlink&quot; title=&quot;Build time limits&quot;&gt;&lt;/a&gt;Build time limits&lt;/h2&gt;&lt;p&gt;It is ten 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>New Jenkins install to manage the builds</title>
    <link href="http://log.github.io/2016/09/26/2016-09-26-jenkins-from-scratch/"/>
    <id>http://log.github.io/2016/09/26/2016-09-26-jenkins-from-scratch/</id>
    <published>2016-09-25T23:00:00.000Z</published>
    <updated>2016-09-27T08:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>I need a new Jenkins installation, because the current one has an annoying encoding bug. Even though the locale is set to UTF-8 and the log files are stored in UTF-8 internally, the log file is converted to another encoding when served over the web.</p>
<p>Running Jenkins in a Docker container was not the best idea, in the sense that it was quite fiddly to manage. So I’ll install Jenkins now on a new VM, without Docker.</p>
<h2 id="Installing-Jenkins"><a href="#Installing-Jenkins" class="headerlink" title="Installing Jenkins"></a>Installing Jenkins</h2><p>Create a new VM on Amazon. I used an Ubuntu 16.04 HVM AMI. The instructions are for older Ubuntu versions I guess, because they mention <code>openjdk-7-jre</code>, but I suppose, the newer Java should work fine.</p>
<p>Follow <a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu" target="_blank" rel="external">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu</a>:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get upgrade</div><div class="line">sudo apt-get install -y openjdk-8-jre openjdk-8-jdk</div></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</div><div class="line">sudo sh -c <span class="string">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install -y jenkins</div></pre></td></tr></table></figure>
<p>Need to change the jenkins startup options in <code>/etc/default/jenkins</code> to make sure Jenkins stores files in UTF-8, because it seems to ignore the system locale:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JAVA_ARGS=&quot;-Dfile.encoding=UTF-8 ...&quot;</div></pre></td></tr></table></figure></p>
<p>The same flag must be added to the script that starts the workers, see later.</p>
<h2 id="Add-redirect-DNS"><a href="#Add-redirect-DNS" class="headerlink" title="Add/redirect DNS"></a>Add/redirect DNS</h2><p>Set the A record of <code>jenkins.r-hub.io</code> to the new server.</p>
<h2 id="Configure-Jenkins"><a href="#Configure-Jenkins" class="headerlink" title="Configure Jenkins"></a>Configure Jenkins</h2><p>Make sure you have access to port 8080 on the instance, and then start configuring Jenkins from your browser.</p>
<p>Install no plugin from the installer. It does not have the full list,<br>so we’ll have to install some plugins later, anyway. So we’ll do it all at once.</p>
<p>Create an admin user called <code>admin</code>, and a secure password.</p>
<p>Install the following plugins using the plugin manager:</p>
<ul>
<li>Build timeout plugin</li>
<li>Cross-platform shell plugin</li>
<li>Email extension plugin</li>
<li>Elastic axis plugin</li>
<li>Groovy postbuild plugin</li>
<li>Mailer plugin</li>
<li>PowerShell plugin</li>
<li>Self-Organizing Swarm Plug-in Modules</li>
<li>SSH Slaves plugin</li>
<li>Workspace cleanup plugins</li>
</ul>
<p>Then configure Jenkins:</p>
<ul>
<li>Set the quiet period to <code>0</code>, no need to wait before starting a build.</li>
<li>Setup global environment variables: <code>PS4=&quot;+R-HUB-R-HUB-R-HUB&quot;</code></li>
<li>Jenkins URL: <code>http://jenkins.r-hub.io:8080/</code></li>
<li>Admin email address: <code>admin@r-hub.io</code></li>
<li>Extended email notification requires some configuration:<ol>
<li>SMTP server: <code>127.0.0.1</code></li>
<li>Default User email suffix: <code>@r-hub.io</code></li>
<li>Reply-to list: <code>admin@r-hub.io</code></li>
</ol>
</li>
<li>In Jenkins global security config, set the TCP port for JNLP agents to fixed 50000.</li>
<li>Set the Security realm to Jenkins’ own user database, do not allow users to sign up</li>
<li>Set the authorization to Matrix-based security, give overall <em>Administter</em> rights to <code>admin</code></li>
<li>Turn <em>off</em> the “Prevent Cross Site Request Forgery exploits” switch. This does not work currently, I am not sure why.</li>
<li>Turn on Slave → Master Access Control</li>
</ul>
<h2 id="Install-and-configure-mail-server"><a href="#Install-and-configure-mail-server" class="headerlink" title="Install and configure mail server"></a>Install and configure mail server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install postfix</div></pre></td></tr></table></figure>
<p>The name of the system is <code>jenkins.r-hub.io</code>.</p>
<h2 id="Add-workers"><a href="#Add-workers" class="headerlink" title="Add workers"></a>Add workers</h2><p>SSH to a Linux worker, and restart the swarm process:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restart swarm JENKINS_PASSWORD=&lt;passwd&gt; RHUB_IP=jenkins.r-hub.io</div></pre></td></tr></table></figure></p>
<p>On the windows workers, just restart the Java process with the new Jenkins server</p>
<p>Quite annoyingly, Azure sometimes changes the IP address of the builders, and then I need to update the <code>jenkins</code> security group on AWS.</p>
<h2 id="Update-builder-config"><a href="#Update-builder-config" class="headerlink" title="Update builder config"></a>Update builder config</h2><p>Make sure that the Jenkins server, and the builder server (that runs the frontend and the backend) are both have the same (<code>default</code>) security group.</p>
<p>Configure the <code>JENKINS_URL</code> environment variable on dokku, use the internal IP address of the Jenkins server. E.g.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dokku config:<span class="built_in">set</span> cron JENKINS_URL=http://admin:&lt;passwd&gt;@172.31.30.118:8080</div></pre></td></tr></table></figure>
<p>Do this for all node apps that need access to Jenkins: <code>builder</code>, <code>buidler-test</code>, <code>backend</code> and <code>cron</code> currently.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I need a new Jenkins installation, because the current one has an annoying encoding bug. Even though the locale is set to UTF-8 and the l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TODO list for this and next week</title>
    <link href="http://log.github.io/2016/09/22/2016-09-22-todo-list/"/>
    <id>http://log.github.io/2016/09/22/2016-09-22-todo-list/</id>
    <published>2016-09-21T23:00:00.000Z</published>
    <updated>2016-10-10T22:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>✔ Fix up the <code>rhub</code> R package, make it public.</li>
<li>✔ Provide proper sanitizer output from the SAN image</li>
<li>✔ More Windows versions: R-devel, R-release, R-patched.</li>
<li>✔ Create a proper Windows builder image</li>
<li>✔ Nice output in emails</li>
<li>✔ Build time limit</li>
<li>✔ Passing arguments to the build command, e.g. <code>--valgrind</code></li>
<li>✔ Think about <code>sysreqs</code> on Windows</li>
<li>✔ Think about caching binaries for Linux</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;✔ Fix up the &lt;code&gt;rhub&lt;/code&gt; R package, make it public.&lt;/li&gt;
&lt;li&gt;✔ Provide proper sanitizer output from the SAN image&lt;/li&gt;
&lt;li&gt;✔ 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>More admin tasks and dealing with Azure</title>
    <link href="http://log.github.io/2016/09/20/2016-09-20-more-admin-tasks/"/>
    <id>http://log.github.io/2016/09/20/2016-09-20-more-admin-tasks/</id>
    <published>2016-09-19T23:00:00.000Z</published>
    <updated>2016-09-22T11:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sensu-plugins-on-clients"><a href="#Sensu-plugins-on-clients" class="headerlink" title="Sensu plugins on clients"></a>Sensu plugins on clients</h2><p>OK, for the Sensu addition yesterday it turns out that two Sensu<br>plugins are also needed on clients:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sensu-install -p cpu-checks</div><div class="line">sensu-install -p disk-checks</div></pre></td></tr></table></figure>
<p>and then the new Sensu client is all green.</p>
<h2 id="Getting-rid-of-a-Sensu-check"><a href="#Getting-rid-of-a-Sensu-check" class="headerlink" title="Getting rid of a Sensu check"></a>Getting rid of a Sensu check</h2><p>This is surprisingly difficult. Yesterday I switched <code>cranlogs.r-pkg.org</code> to HTTPS, after getting a new certificate for it. It seems to work fine now, I don’t know what was the problem last time (<a href="https://github.com/metacran/cranlogs.app/issues/22" target="_blank" rel="external">https://github.com/metacran/cranlogs.app/issues/22</a>), but it works fine today.</p>
<p>I also updated the Sensu checks for <code>cranlogs</code>, to check HTTPS and also the HTTP -&gt; HTTPS redirect. It seems that to get rid of the old check, one has to restart the Sensu server and the client as well, both running on <code>monitor.r-hub.io</code> in this case.</p>
<p>Also, one needs to put the port number into the check. Even if the nginx redirect header does not have it: <code>https://cranlogs.r-pkg.org:443/downloads/daily/last-week/igraph</code></p>
<h2 id="Azure-disk-attach-detach"><a href="#Azure-disk-attach-detach" class="headerlink" title="Azure disk attach/detach"></a>Azure disk attach/detach</h2><p>This seems to a straightforwars enough operation, but it is not. Make sure that you close the browser tab, and open a new one to Azure, after each detach/attach operation, because the UI does not refresh the state of the disk. It is actually the same for the state of the virtual machine, you click on Stop, it stops (after some time), but the state is never updated, until a new browser UI window is used.</p>
<p>I wonder who thought this was a good idea. It only took me ~4 hours to solve this, thank you.</p>
<h2 id="Fedora-update"><a href="#Fedora-update" class="headerlink" title="Fedora update"></a>Fedora update</h2><p>Finally I fixed the Docker builds in <code>cran.r-hub.io</code>, and built new Fedora images. (<a href="https://github.com/r-hub/rhub-linux-builders/pull/12#issuecomment-247629893" target="_blank" rel="external">https://github.com/r-hub/rhub-linux-builders/pull/12#issuecomment-247629893</a>)</p>
<p>In the process of brushing up Jenkins, I made sure that I get emails about failures, both from <code>cran.r-hub.io</code> and <code>jenkins.r-pkg.org</code>. For this one needs to install <code>postfix</code>, and on <code>jenkins.r-pkg.org</code>, one also needs to allow the Docker subnets in the <code>main.mf</code> <code>postfix</code> config file, because there Jenkins runs in a container.</p>
<p>The only glitch is that the clang image does not build, because I would need another external clang repository for that. :(</p>
<h2 id="Dokku-update-on-metacran"><a href="#Dokku-update-on-metacran" class="headerlink" title="Dokku update on metacran"></a>Dokku update on metacran</h2><p>I updated Dokku to the latest stable version (0.7.1) on <code>r-pkg.org</code>. This affects <code>cranlogs.r-pkg.org</code>, <code>rversions.r-pkg.org</code>, <code>crandeps.r-pkg.org</code> as well. The new version uses the new plugins for Redis and PostgreSQL as well.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sensu-plugins-on-clients&quot;&gt;&lt;a href=&quot;#Sensu-plugins-on-clients&quot; class=&quot;headerlink&quot; title=&quot;Sensu plugins on clients&quot;&gt;&lt;/a&gt;Sensu plugins 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some regular admin tasks to start the day</title>
    <link href="http://log.github.io/2016/09/19/2016-09-19-admin-tasks/"/>
    <id>http://log.github.io/2016/09/19/2016-09-19-admin-tasks/</id>
    <published>2016-09-18T23:00:00.000Z</published>
    <updated>2016-09-20T20:41:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Yuuuhooooo! Working on r-hub again!</p>
<h2 id="OS-updates"><a href="#OS-updates" class="headerlink" title="OS updates"></a>OS updates</h2><p>First of all, I ran <code>apt-get update; apt-get upgrade</code> etc. on the various hosts:</p>
<ul>
<li><code>r-hub.io</code></li>
<li><code>ci.r-hub.io</code></li>
<li>Linux builder 1</li>
<li>Linux builder 2</li>
<li><code>cran.r-hub.io</code></li>
<li><code>monitor.r-hub.io</code></li>
<li><code>install-github.me</code></li>
<li><code>jenkins.r-pkg.org</code></li>
<li><code>seer.r-pkg.org</code></li>
<li><code>crandb.r-pkg.org</code></li>
<li><code>docs.r-pkg.org</code></li>
<li><code>www.r-pkg.org</code></li>
</ul>
<p>AWS changed the IP address of <code>ci.r-hub.io</code>, because I stopped it. Hmmm, it really should not do that. I had to change it in the DNS.</p>
<h2 id="Running-out-of-disk"><a href="#Running-out-of-disk" class="headerlink" title="Running out of disk"></a>Running out of disk</h2><p>The disk of <code>cran-r-hub.io</code> was filling up. This is the machine that builds the Docker images for the builders, so it needs more disk as we are adding more images. It is easy to resize the disk on Azure, just:</p>
<ul>
<li>shut down the machine,</li>
<li><em>stop it</em> from the Azure web portal (wait for it…),</li>
<li>resize the disk on the Azure web portal,</li>
<li>start the machine.<br>Resized to 100GiB now, this should be enough for a lot of images.</li>
</ul>
<h2 id="SSL-certificates"><a href="#SSL-certificates" class="headerlink" title="SSL certificates"></a>SSL certificates</h2><p>Next, I updated the SSL certificates for</p>
<ul>
<li><code>ci.r-hub.io</code></li>
<li><code>cranlogs.r-pkg.org</code></li>
</ul>
<h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><p>I added monitoring to the following machine:</p>
<ul>
<li><code>cran.r-hub.io</code></li>
</ul>
<p>The following are monitored:</p>
<ul>
<li>whether the machine is up,</li>
<li>disk space,</li>
<li>cpu load</li>
</ul>
<p>For Linux machines, I had to run this. Add repos and install packages first:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget -q https://sensu.global.ssl.fastly.net/apt/pubkey.gpg -O- | sudo apt-key add -</div><div class="line"><span class="built_in">echo</span> <span class="string">"deb https://sensu.global.ssl.fastly.net/apt sensu main"</span> | sudo tee /etc/apt/sources.list.d/sensu.list</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install sensu</div></pre></td></tr></table></figure></p>
<p>Put the following into <code>/etc/sensu/conf.d/rabbitmq.json</code>:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"rabbitmq"</span>: &#123;</div><div class="line">    <span class="attr">"ssl"</span>: &#123;</div><div class="line">      <span class="attr">"cert_chain_file"</span>: <span class="string">"/etc/sensu/ssl/cert.pem"</span>,</div><div class="line">      <span class="attr">"private_key_file"</span>: <span class="string">"/etc/sensu/ssl/key.pem"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"monitor.r-hub.io"</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">5671</span>,</div><div class="line">    <span class="attr">"vhost"</span>: <span class="string">"/sensu"</span>,</div><div class="line">    <span class="attr">"user"</span>: <span class="string">"sensu"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"&lt;omitted&gt;"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Copy the Sensu certificate and the private key from the monitoring server to <code>/etc/sensu/ssl/cert.pem</code> and <code>/etc/sensu/ssl/key.pem</code>:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp ubuntu@monitor.r-hub.io:/etc/sensu/ssl/cert.pem .</div><div class="line">scp ubuntu@monitor.r-hub.io:/etc/sensu/ssl/key.pem .</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>Make sure they are owned by <code>sensu:sensu</code>.</p>
<p>Put this into <code>/etc/sensu/conf.d/client.json</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;client&quot;: &#123;</div><div class="line">    &quot;name&quot;: &quot;cran.r-hub.io&quot;,</div><div class="line">    &quot;address&quot;: &quot;13.88.23.239&quot;,</div><div class="line">    &quot;subscriptions&quot;: [ &quot;common&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Enable sensu on boot, start the client:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo update-rc.d sensu-client defaults</div><div class="line">sudo /etc/init.d/sensu-client start</div></pre></td></tr></table></figure></p>
<p>Enable the client in the AWS firewall, in the <code>sensu dashboard</code> security group.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yuuuhooooo! Working on r-hub again!&lt;/p&gt;
&lt;h2 id=&quot;OS-updates&quot;&gt;&lt;a href=&quot;#OS-updates&quot; class=&quot;headerlink&quot; title=&quot;OS updates&quot;&gt;&lt;/a&gt;OS updates&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nice(r) output at the R command line</title>
    <link href="http://log.github.io/2016/09/13/2016-09-13-nice-rhub-output/"/>
    <id>http://log.github.io/2016/09/13/2016-09-13-nice-rhub-output/</id>
    <published>2016-09-12T23:00:00.000Z</published>
    <updated>2016-09-13T19:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>After fixing the streaming from the windows builds, I worked on making the output nicer in the <code>rhub</code> R package (not yet public) as well. Not finished yet, but already much-much better. Sneak peek:</p>
<p><img src="/images/rhub-output.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After fixing the streaming from the windows builds, I worked on making the output nicer in the &lt;code&gt;rhub&lt;/code&gt; R package (not yet publi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows builds are streaming output</title>
    <link href="http://log.github.io/2016/09/12/2016-09-13-windows-builds-streaming/"/>
    <id>http://log.github.io/2016/09/12/2016-09-13-windows-builds-streaming/</id>
    <published>2016-09-11T23:00:00.000Z</published>
    <updated>2016-09-13T15:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>And it only took me half a day. :)</p>
<p>Lesson learned: in PowerShell, if you <code>WaitForExit</code> on a <code>Process</code>, then the no output events are generated until it will be finished. I guess it should be named <code>WaitForExitAndDoNothingElse</code>… anyway, this is fixed now <a href="https://github.com/r-hub/wincheck/commit/ac9d4fc3e7e7f3edda06d08a0a432659404bd1f9" target="_blank" rel="external">in this commit</a>.</p>
<p>Another painful lesson is that apparently not everything is included in a generalized image on Azure. I did install Carbon, and more PowerShell stuff before capturing the image, but they were not present in the image. :( I guess I need to install them to some system directory, instead of the user’s home.</p>
<p>Now I need to section the output on Windows, <a href="https://github.com/r-hub/wincheck/issues/4" target="_blank" rel="external">this issue</a>), and then make the output nicer</p>
<ul>
<li>in the <code>rhub</code> client,</li>
<li>on the web,</li>
<li>in the email message.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;And it only took me half a day. :)&lt;/p&gt;
&lt;p&gt;Lesson learned: in PowerShell, if you &lt;code&gt;WaitForExit&lt;/code&gt; on a &lt;code&gt;Process&lt;/code&gt;, then 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The first Windows Build</title>
    <link href="http://log.github.io/2016/09/12/2016-09-12-first-windows-build/"/>
    <id>http://log.github.io/2016/09/12/2016-09-12-first-windows-build/</id>
    <published>2016-09-11T23:00:00.000Z</published>
    <updated>2016-09-13T12:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>… just finished on the test server. It does have some glitches, but it is a start!</p>
<p>The main glitch is that the output is not streamed. This will require some more PowerShell tricks to fix. The problem is that the output is coming from another process, ran by another user, and this is apparently non-standard.</p>
<p>A bigger issue will be to work out how we should use <code>sysreqs</code> on Windows.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;… just finished on the test server. It does have some glitches, but it is a start!&lt;/p&gt;
&lt;p&gt;The main glitch is that the output is not strea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>More Linux images</title>
    <link href="http://log.github.io/2016/09/04/2016-09-04-new-linux-images/"/>
    <id>http://log.github.io/2016/09/04/2016-09-04-new-linux-images/</id>
    <published>2016-09-03T23:00:00.000Z</published>
    <updated>2016-09-13T12:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>We have added three new Linux images with Jeroen:</p>
<ul>
<li><code>linux-x86_64-centos6-epel</code></li>
<li><code>linux-x86_64-centos6-epel-rdt</code></li>
<li><code>linux-x86_64-rocker-gcc-san</code></li>
</ul>
<p>The last one runs the check with address sanitizer turned on. Unfortunately the ASAN/UBSAN output is suppressed currently,<br>so we still need to work on this. :(</p>
<p>Some lessons learned, and improvements:</p>
<ul>
<li>The images must have <code>curl</code>, this is there on the CentOS6 images by default, but not on the Rocker images.</li>
<li>The images must have <code>xvfb</code> as well.</li>
<li>We are running xvfb now with a 1024x768 screen, and 24 bits color depth. This eliminates some R problems, that come up when not enough colors are available.</li>
<li>The images may set the <code>RBINARY</code> environment variable. The ASAN image uses this to start the ASAN-augmented version of R, which is called <code>RD</code> on the image.</li>
<li>Jenkins now starts <code>bash</code> in the Docker container with <code>-l</code>, to make it a login shell. This allows running <code>/etc/bashrc</code> in the image. The <code>epel-rdt</code> image runs the RDT config file this way.</li>
</ul>
<h3 id="System-requirements-improvements"><a href="#System-requirements-improvements" class="headerlink" title="System requirements improvements"></a>System requirements improvements</h3><p>We have also added a bunch of new system requirements.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have added three new Linux images with Jeroen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linux-x86_64-centos6-epel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linux-x86_64-centos6
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The `rhub` R package</title>
    <link href="http://log.github.io/2016/09/03/2016-09-03-the-rhub-package/"/>
    <id>http://log.github.io/2016/09/03/2016-09-03-the-rhub-package/</id>
    <published>2016-09-02T23:00:00.000Z</published>
    <updated>2016-09-13T12:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have started to implement the <code>rhub</code> R package, to start builds from<br>within R. Its repository is now private, until it stabilizes a bit. Let me<br>know if you want to take an early peek at it.</p>
<p>It’s UI needs a lot of improvements, but the streaming part works fine,<br>thanks to the streaming support of the <code>curl</code> R package.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have started to implement the &lt;code&gt;rhub&lt;/code&gt; R package, to start builds from&lt;br&gt;within R. Its repository is now private, until it st
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Getting closer to Windows</title>
    <link href="http://log.github.io/2016/08/16/2016-08-16-windows-checks/"/>
    <id>http://log.github.io/2016/08/16/2016-08-16-windows-checks/</id>
    <published>2016-08-15T23:00:00.000Z</published>
    <updated>2016-09-13T12:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Powershell-for-the-win"><a href="#Powershell-for-the-win" class="headerlink" title="Powershell for the win"></a>Powershell for the win</h3><p>I am getting closer to supporting windows builds. I started to write two Powershell scripts, that will eventually perform the windows builds on the slaves: <a href="https://github.com/r-hub/wincheck" target="_blank" rel="external">https://github.com/r-hub/wincheck</a></p>
<p>The first one <code>run.ps1</code></p>
<ul>
<li>creates a new user with a random username,</li>
<li>creates its home directory as well,</li>
<li>makes sure that the home directory is not readable by other users,</li>
<li>starts the build process (other script) as the newly created user, and makes sure that its standard output and error are redirected and still printed to the screen.</li>
</ul>
<p>The other script is <code>slave.ps1</code>. This runs the actual <code>R CMD check</code>. It all works now, but I need more features, e.g. installing dependencies. In general it should do everything the unix version (at <a href="https://github.com/r-hub/rhub-backend/blob/master/templates/jenkins.sh" target="_blank" rel="external">https://github.com/r-hub/rhub-backend/blob/master/templates/jenkins.sh</a>) does.</p>
<p>Eventually these powershell scripts should go in the <code>rhub-backend</code> repository I believe.</p>
<p>Somewhat surprisingly, Powershell is not very good at some sysadmin tasks, e.g. creating local users is hard in plain Powershell. So for this we require Carbon (<a href="http://get-carbon.org/" target="_blank" rel="external">http://get-carbon.org/</a>) for now, this has to be installed on the Windows builders.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Powershell-for-the-win&quot;&gt;&lt;a href=&quot;#Powershell-for-the-win&quot; class=&quot;headerlink&quot; title=&quot;Powershell for the win&quot;&gt;&lt;/a&gt;Powershell for the w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Binary cache &amp; Windows</title>
    <link href="http://log.github.io/2016/07/05/2016-07-05-binary-cache/"/>
    <id>http://log.github.io/2016/07/05/2016-07-05-binary-cache/</id>
    <published>2016-07-04T23:00:00.000Z</published>
    <updated>2016-09-13T12:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-more-Linux-builders"><a href="#Some-more-Linux-builders" class="headerlink" title="Some more Linux builders"></a>Some more Linux builders</h3><ul>
<li><code>r-patched-linux-x86_64</code> Debian testing</li>
<li><code>r-devel-linux-x86_64-ubuntu-16.04</code> most recent Ubuntu LTS</li>
<li><code>r-release-linux-x86_64-ubuntu-16.04</code> most recent Ubuntu LTS</li>
<li><code>r-devel-linux-x86_64-debian-jessie</code> stable Debian</li>
<li><code>r-release-linux-x86_64-debian-jessie</code> stable Debian</li>
</ul>
<p>Adding new images is somewhat complicated. I need to add them at several places:</p>
<ul>
<li>Add the Dockerfile to the rhub-linux-builders repo.</li>
<li>Create a repository on Docker Hub.</li>
<li>Add an entry to <code>jenkins.sh</code> in the same repo, to build it periodically.</li>
<li>Add an entry to <code>public/data/platforms.json</code> on the rhub-frontend repo.</li>
<li>Add it to the Jenkins job that pulls images to the workers.</li>
<li>Run the Jenkins job that builds the images, and/or build them by hand and push them to Docker Hub</li>
<li>Add the platform to the sysreqs database, if it is not there yet. Update the database from GitHub.</li>
</ul>
<p>Then one needs to re-reploy the frontend (!).</p>
<p>We need some central configuration store, like <code>etcd</code>, or something similar, to avoid this lengthy and error-prone procedure.</p>
<h3 id="Windows-builders"><a href="#Windows-builders" class="headerlink" title="Windows builders"></a>Windows builders</h3><p>Jenkins has an Azure plugin. Unfortunately it uses the ‘classic’ system, which is soft-deprecated on Azure, and the branch to update it to the new Azure Resource Manager seems to be dead.</p>
<p>After a couple of hours I could get it work. Key points:</p>
<ul>
<li>Use the JNLP launch method. Much easier than SSH.</li>
<li>The JNLP port needs to be fixed to 50000, but it was already fixed, anyway.</li>
<li>Leave the 8080 and 50000 ports open on the master. These must be restricted to the slave IP addresses in the future.</li>
<li>A new user ‘slave’ is needed in Jenkins, and its name and token must be added to the example init file.</li>
<li>The new user needs capabilities: overall/read, slave/connect and slave/disconnect.</li>
</ul>
<p>As for provisioning, I’ll write a short powershell script that downloads the real provisioning script from GitHub, similarly to how r-appveyor works.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Some-more-Linux-builders&quot;&gt;&lt;a href=&quot;#Some-more-Linux-builders&quot; class=&quot;headerlink&quot; title=&quot;Some more Linux builders&quot;&gt;&lt;/a&gt;Some more Linu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fighting with Jenkins</title>
    <link href="http://log.github.io/2016/07/04/2016-07-04-jenkins-post/"/>
    <id>http://log.github.io/2016/07/04/2016-07-04-jenkins-post/</id>
    <published>2016-07-03T23:00:00.000Z</published>
    <updated>2016-09-13T12:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Streaming-output-from-Jenkins"><a href="#Streaming-output-from-Jenkins" class="headerlink" title="Streaming output from Jenkins"></a>Streaming output from Jenkins</h3><p>Seems like Jenkins does not drop TCP connections coming for the builder web app to stream the console output. What is even worse, it keeps a thread for each connection, and gets really slow already around ~20 threads. (What the hell is it doing? It should be just listening on a socket….)</p>
<p>Anyway, this needs to be fixed: <a href="https://github.com/r-hub/rhub-frontend/issues/8" target="_blank" rel="external">https://github.com/r-hub/rhub-frontend/issues/8</a></p>
<h3 id="cron-app-dies-sometimes"><a href="#cron-app-dies-sometimes" class="headerlink" title="cron app dies sometimes"></a><code>cron</code> app dies sometimes</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">2016-07-04T10:45:10.973610931Z app[web.1]: &gt; rhub-cron@1.0.0 start /app</div><div class="line">2016-07-04T10:45:10.973617561Z app[web.1]: &gt; node ./bin/scheduler</div><div class="line">2016-07-04T10:45:10.973623287Z app[web.1]:</div><div class="line">2016-07-04T11:42:42.620726576Z app[web.1]: /app/index.js:33</div><div class="line">2016-07-04T11:42:42.620802676Z app[web.1]: 	jen.build.get(job.name, data.lastBuild.number, function(err, data) &#123;</div><div class="line">2016-07-04T11:42:42.620850863Z app[web.1]: 	                                      ^</div><div class="line">2016-07-04T11:42:42.620885526Z app[web.1]:</div><div class="line">2016-07-04T11:42:42.620919177Z app[web.1]: TypeError: Cannot read property &apos;number&apos; of null</div><div class="line">2016-07-04T11:42:42.620927075Z app[web.1]:     at /app/index.js:33:40</div><div class="line">2016-07-04T11:42:42.620932178Z app[web.1]:     at next (/app/node_modules/papi/lib/client.js:292:32)</div><div class="line">2016-07-04T11:42:42.620946196Z app[web.1]:     at Jenkins.body (/app/node_modules/jenkins/lib/middleware.js:14:3)</div><div class="line">2016-07-04T11:42:42.620950958Z app[web.1]:     at next (/app/node_modules/papi/lib/client.js:298:10)</div><div class="line">2016-07-04T11:42:42.620955722Z app[web.1]:     at Jenkins.&lt;anonymous&gt; (/app/node_modules/jenkins/lib/middleware.js:88:5)</div><div class="line">2016-07-04T11:42:42.620960668Z app[web.1]:     at next (/app/node_modules/papi/lib/client.js:298:10)</div><div class="line">2016-07-04T11:42:42.620965208Z app[web.1]:     at Jenkins._onResponse (/app/node_modules/jenkins/lib/jenkins.js:109:3)</div><div class="line">2016-07-04T11:42:42.620981759Z app[web.1]:     at next (/app/node_modules/papi/lib/client.js:298:10)</div><div class="line">2016-07-04T11:42:42.620988281Z app[web.1]:     at IncomingMessage.&lt;anonymous&gt; (/app/node_modules/papi/lib/client.js:598:7)</div><div class="line">2016-07-04T11:42:42.621025915Z app[web.1]:     at emitNone (events.js:85:20)</div></pre></td></tr></table></figure>
<p><a href="https://github.com/r-hub/rhub-cron/issues/1" target="_blank" rel="external">https://github.com/r-hub/rhub-cron/issues/1</a></p>
<h3 id="Upload-storage-dokku-upgrade"><a href="#Upload-storage-dokku-upgrade" class="headerlink" title="Upload storage, dokku upgrade"></a>Upload storage, dokku upgrade</h3><p>Uploads must be moved out of the container, because if I update the web app, they are deleted. Dokku makes this easy with the new storage plugin (<a href="http://dokku.viewdocs.io/dokku/dokku-storage/" target="_blank" rel="external">http://dokku.viewdocs.io/dokku/dokku-storage/</a>), but for this I had to upgrade dokku to 0.6.4.</p>
<p>It all seems to work fine, except that every time I redeploy the frontend, I usually need to redeploy the backend as well….</p>
<p>Closes <a href="https://github.com/r-hub/rhub-frontend/issues/7" target="_blank" rel="external">https://github.com/r-hub/rhub-frontend/issues/7</a></p>
<h3 id="Periodically-building-the-docker-images"><a href="#Periodically-building-the-docker-images" class="headerlink" title="Periodically building the docker images"></a>Periodically building the docker images</h3><p>For the devel R versions at least. I cannot do this on Docker Hub, because I have multiple images in a single repo (I really do not want 20 repos for 20 images.) I also cannot do it on Travis, because with 6 images I already hit the 50 minutes time limit.</p>
<p>So I’ll do it on the Jenkins CI on Azure (cran.r-hub.io). It takes about 2 hours to build them now. I’ll do them once a week (Sunday evening), and also whenever the repo with the Dockerfiles changes. I have added a hook for this. The job pushes the images to Docker Hub.</p>
<p>I still need to have a way to pull them to the worker nodes, I guess that’ll be just another Jenkins job on the workers. This one can run every hour, if there are no new images, then it is quick. Also, just one job is enough, just need to configure it to run on all workers.</p>
<p>Apparently, I need the <code>Elastic Axis plugin</code> for this. I run the pulls sequentially, so that the worker nodes don’t update at the same time.</p>
<h3 id="Use-a-single-keepalive-job"><a href="#Use-a-single-keepalive-job" class="headerlink" title="Use a single keepalive job"></a>Use a single keepalive job</h3><p>Instead of one per worker. Now that I have found the <code>Elastic Axis plugin</code>.</p>
<h3 id="Test-builder-web-app"><a href="#Test-builder-web-app" class="headerlink" title="Test builder web app"></a>Test builder web app</h3><p>Is at <a href="http://builder-test.r-hub.io" target="_blank" rel="external">http://builder-test.r-hub.io</a>. Note the <code>http</code>, letsencrypt seems to be down, so I could not get a certificate. This has a different redirect URL, so it needs a separate GitHub application.</p>
<h3 id="Alternative-email-address"><a href="#Alternative-email-address" class="headerlink" title="Alternative email address"></a>Alternative email address</h3><p><a href="https://github.com/r-hub/rhub-frontend/issues/9" target="_blank" rel="external">https://github.com/r-hub/rhub-frontend/issues/9</a> The test builder uses this now.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Streaming-output-from-Jenkins&quot;&gt;&lt;a href=&quot;#Streaming-output-from-Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Streaming output from Jenkins&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The r-hub log</title>
    <link href="http://log.github.io/2016/07/04/2016-07-04-the-r-hub-log/"/>
    <id>http://log.github.io/2016/07/04/2016-07-04-the-r-hub-log/</id>
    <published>2016-07-03T23:00:00.000Z</published>
    <updated>2016-09-13T12:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the r-hub log. r-hub is a project to build infrastructure for R users. See more about it in the <a href="https://github.com/r-hub/proposal" target="_blank" rel="external">project proposal</a>.</p>
<h2 id="About-this-log"><a href="#About-this-log" class="headerlink" title="About this log"></a>About this log</h2><p>This log serves as a notebook for what is being done on r-hub. I probably will not make an effort to make it very readable, and it will be mostly technical.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to the r-hub log. r-hub is a project to build infrastructure for R users. See more about it in the &lt;a href=&quot;https://github.com/r-
    
    </summary>
    
    
  </entry>
  
</feed>
